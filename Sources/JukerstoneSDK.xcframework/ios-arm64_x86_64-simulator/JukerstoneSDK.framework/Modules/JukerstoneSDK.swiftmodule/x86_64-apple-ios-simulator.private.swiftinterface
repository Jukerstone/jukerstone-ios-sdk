// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios17.5-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name JukerstoneSDK
import AVFAudio
import AVFoundation
import Combine
import Foundation
@_exported import JukerstoneSDK
import Swift
import SwiftUI
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(iOS 13.0, *)
extension JukerstoneSDK.JukePodSDK : WebKit.WKNavigationDelegate {
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
}
@available(iOS 13.0, *)
@_Concurrency.MainActor(unsafe) public struct Jukerstone : SwiftUI.UIViewRepresentable {
  @_Concurrency.MainActor(unsafe) public var jukerstoneId: Swift.String
  @_Concurrency.MainActor(unsafe) public var developerToken: Swift.String
  @_Concurrency.MainActor(unsafe) public init(sdk: JukerstoneSDK.JukePodSDK, jukerstoneId: Swift.String, developerToken: Swift.String)
  @_Concurrency.MainActor(unsafe) public func makeUIView(context: JukerstoneSDK.Jukerstone.Context) -> UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func updateUIView(_ uiView: UIKit.UIView, context: JukerstoneSDK.Jukerstone.Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewType = UIKit.UIView
}
@_hasMissingDesignatedInitializers public class APIService {
  @objc deinit
}
@available(iOS 13.0, *)
extension JukerstoneSDK.JukePodSDK {
  @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
@objc @_inheritsConvenienceInitializers @available(iOS 13.0, *)
public class JukePodSDK : ObjectiveC.NSObject, Combine.ObservableObject, WebKit.WKScriptMessageHandler {
  public var index: Swift.Int
  public var isPaused: Swift.Bool
  public var buffer: [Foundation.URL]
  public var jukerstoneId: Swift.String?
  public var developerToken: Swift.String?
  public var backgroundBuffer: WebKit.WKWebView
  public var foregroundPrimaryBuffer: WebKit.WKWebView
  public var foregroundSecondaryBuffer: WebKit.WKWebView
  public var backgroundRunningPrimaryBuffer: WebKit.WKWebView
  public var backgroundRunningSecondaryBuffer: WebKit.WKWebView
  public var nowPlaying: [Swift.String : Any]?
  @Combine.Published @_projectedValueProperty($progress) public var progress: Swift.Double {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $progress: Combine.Published<Swift.Double>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($currentTime) public var currentTime: Swift.Double {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $currentTime: Combine.Published<Swift.Double>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($duration) public var duration: Swift.Double {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $duration: Combine.Published<Swift.Double>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @objc override dynamic public init()
  public var onVideoEnd: (() -> Swift.Void)?
  public var onNext: (() -> Swift.Void)?
  public var onPrevious: (() -> Swift.Void)?
  public func playNow(isrc: Swift.String)
  public func queueNext(isrc: Swift.String)
  public func queue(isrc: Swift.String)
  public func printQueue()
  public func removeFromQueue(isrc: Swift.String)
  public func pause()
  public func resume()
  public func next()
  public func seek(percentage: Swift.Double)
  public func stop()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public func configureAudioSession()
public func seekJavaScript(seekTo: Swift.Double) -> Swift.String
public func buildMediaSessionJavaScript(track: [Swift.String : Any]) -> Swift.String
public func buildActiveJavaScript() -> Swift.String
public func buildInactiveJavaScript() -> Swift.String
public func buildPauseJavaScript() -> Swift.String
public func buildPlayJavaScript() -> Swift.String
public func buildCommonJavaScript() -> Swift.String
